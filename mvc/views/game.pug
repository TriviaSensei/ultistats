extends _base

block styles 
    link(rel="stylesheet" href="/css/game.css")
    //- - var color1 = colors[0];
    //- - var color2 = colors[1];
    //- - var color3 = colors[2];
    //- - var color4 = colors[3];
    style.
        .light, input.light-jersey[type="radio"]:checked + label {
            background-color: #{colors[0]};
            color: #{colors[1]};
        }
        .dark, input.dark-jersey[type="radio"]:checked + label {
            background-color:#{colors[2]};
            color: #{colors[3]};
        }

block modals 
    include components/modals/game/startSettings
    include components/modals/game/pointSetup

block content
    #data-area.d-none
        #game-data(data-value=`${gameData._id}` data-cap=`${gameData.cap}` data-hard-cap=`${gameData.hardCap}` data-win-by=`${gameData.winBy}` data-timeouts=`${gameData.timeouts}` data-period=`${gameData.period}`)
        #score-data(data-us=`${gameData.score}` data-them=`${gameData.oppScore}`)
        #roster-data 
            each player in roster 
                .player(data-first-name=`${player.firstName}` data-last-name=`${player.lastName}` data-display-name=`${player.displayName}` data-number=`${player.number}` data-line=`${player.line}` data-position=`${player.position}` data-gender=`${player.gender}` data-id=`${player.id}` data-name=`${player.name}`)
        #line-data
            each line in lines 
                .line(data-id=`${line.id}` data-name=`${line.name}`)
                    each player in line.players 
                        .player(data-id=`${player}`)
        #division(data-value=`${division}`)
        #gender-data(data-rule=`${genderRule}` data-start=`${genderRule === 'A' ? gameData.startSettings.genderRatio : gameData.startSettings.genderRatioChoice}`)
        #our-name(data-name=`${team}`)
        #their-name(data-name=`${gameData.opponent}`)
        #start-settings(data-jersey=`${gameData.startSettings.jersey}` data-offense=`${gameData.startSettings.offense}` data-gender-ratio=`${gameData.startSettings.genderRatio}` data-gender-ratio-choice=`${gameData.startSettings.genderRatioChoice}` data-direction=`${gameData.startSettings.direction}`)
        #format-settings(data-max-male=`${gameData.format.genderMax[0]}` data-max-female=`${gameData.format.genderMax[1]}` data-allow-period-end=`${gameData.format.allowPeriodEnd}` data-players=`${gameData.format.players}` data-periods=`${gameData.format.periods}` data-width=`${gameData.format.width}` data-length=`${gameData.format.length}` data-endzone=`${gameData.format.endzone}` data-brick=`${gameData.format.brick}`)
        #point-data
            each point in gameData.points 
                .point(data-score=`${point.score}` data-opp-score=`${point.oppScore}` data-end-period=`${point.endPeriod}` data-scored=`${point.scored}` data-offense=`${point.offense}`)
                    each pass in point.passes 
                        - if (pass.event && pass.event.name === 'timeout')
                            .timeout(data-team=`${pass.event.timeout}`)
        - if (currentPoint)
            #current-point(data-score=`${currentPoint.score}` data-opp-score=`${currentPoint.oppScore}` data-period=`${currentPoint.period}` data-end-period=`${currentPoint.endPeriod}` data-offense=`${currentPoint.offense}` data-direction=`${currentPoint.direction}` data-scored=`${currentPoint.scored}`)
                #lineup
                    - if (currentPoint.lineup)
                        each player in currentPoint.lineup
                            .player(data-id=`${player}`)
                #injuries 
                    - if (currentPoint.injuries)
                        each player in currentPoint.injuries 
                            .player(data-id=`${player}`)
                #passes 
                    - if (currentPoint.passes)
                        each pass in currentPoint.passes 
                            .pass(data-thrower=`${pass.thrower}` data-receiver=`${pass.receiver}` data-defender=`${pass.defender}` data-x0=`${pass.x0}` data-y0=`${pass.y0}` data-x1=`${pass.x1}` data-y1=`${pass.y1}` data-result=`${pass.result}` data-goal=`${pass.goal}`)
    .w-100.h-100.d-flex.flex-column.ai-c.overflow-hidden
        .profile-body.h-100.m-auto.d-flex.flex-column.align-items-center.p-2
            .w-100.p-2
                table#score-bug.m-auto
                    tr#us 
                        td.team-name.w-75 #[span#team-name= team] #[span#team-direction.direction-span]
                        td.team-score= gameData.score
                        td.team-timeouts
                            .timeout-container.p-1
                                - if (gameData.timeouts >= 3)
                                    .timeout-marker.w-100.f-1
                                - else
                                    .timeout-marker.w-100.f-1.used-timeout
                                - if (gameData.timeouts >= 1)
                                    .timeout-marker.w-100.f-1
                                - else
                                    .timeout-marker.w-100.f-1.used-timeout
                        td.game-period.ps-2(rowspan="2")= `${gameData.period === 0 ? 'Pre' : gameData.period===1 ? '1st' : gameData.period === 2 ? '2nd' : gameData.period === 3 ? '3rd' : gameData.period === 4 ? '4th':''}`
                    tr#them 
                        td.team-name #[span#opp-name= gameData.opponent] #[span#opp-direction.direction-span] 
                        td.team-score= gameData.oppScore
                        td.team-timeouts
                            .timeout-container.p-1
                                - if (gameData.timeouts >= 3)
                                    .timeout-marker.w-100.f-1
                                - else
                                    .timeout-marker.w-100.f-1.used-timeout
                                - if (gameData.timeouts >= 1)
                                    .timeout-marker.w-100.f-1
                                - else
                                    .timeout-marker.w-100.f-1.used-timeout
            .field-container.w-100.p-2
                .field.ratio(style=`--bs-aspect-ratio:${ratio}%;`)
                    .disc
                    .disc-line.invisible
                    canvas#field-canvas
            #event-container.w-100.d-flex.align-items-center.mt-2.mb-3
                button#undo-button.btn.btn-warning.btn-sm.p-1(disabled) Undo 
                #event-desc.px-2.f-1 Pre-game 
                button#redo-button.btn.btn-primary.btn-sm.p-1(disabled) Redo
            .f-1.w-100.overflow-hidden
                .w-100.h-100.overflow-hidden
                    #point-settings.w-100.h-100.d-flex.flex-column.justify-content-between.overflow-hidden.d-none
                        button.btn.btn-primary(type="button" data-bs-toggle="modal" data-bs-target="#point-setup-modal") Setup Point
                        button.btn.btn-secondary(type="button" data-bs-toggle="modal" data-bs-target="#start-settings-modal") Edit game start settings
                    #action-div.d-flex.flex-column.w-100.h-100.overflow-auto.d-none
                        include game/editPoint
block scripts
    script.
        const can = document.querySelector('#field-canvas');
        const rect = can.getBoundingClientRect();
        function toNearestHalf(n) {
            return parseFloat((Math.round(n+.5)-0.5).toFixed(1));
        }

        can.setAttribute('width',`${rect.width}px`);
        can.setAttribute('height',`${rect.height}px`);

        const ez = parseFloat(#{endZone});
        const brick = parseFloat(#{brick});
        //draw the left end zone line
        const x1 = toNearestHalf(ez * parseFloat(rect.width));
        const x2 = toNearestHalf((1-ez) * parseFloat(rect.width));
        const xSize = 3;
        const ctx = can.getContext('2d');
        ctx.strokeStyle = "white";
        ctx.lineWidth = 1;
        ctx.beginPath();
        ctx.moveTo(x1,0);
        ctx.lineTo(x1,rect.height);
        ctx.moveTo(x2,0);
        ctx.lineTo(x2,rect.height);
        ctx.stroke();
        ctx.beginPath();
        ctx.setLineDash([5,5]);
        const mid = toNearestHalf((x1+x2)/2); 
        ctx.moveTo(mid,0);
        ctx.lineTo(mid,rect.height);
        ctx.stroke();

        const b1 = toNearestHalf(brick * parseFloat(rect.width));
        const b2 = toNearestHalf((1-brick) * parseFloat(rect.width));
        ctx.lineWidth = 1;
        ctx.beginPath();
        ctx.setLineDash([]);
        ctx.moveTo(b1-xSize,toNearestHalf(rect.height/2)-xSize);
        ctx.lineTo(b1+xSize,toNearestHalf(rect.height/2)+xSize);
        ctx.moveTo(b1+xSize,toNearestHalf(rect.height/2)-xSize);
        ctx.lineTo(b1-xSize,toNearestHalf(rect.height/2)+xSize);
        ctx.stroke();
        ctx.beginPath();
        ctx.setLineDash([]);
        ctx.moveTo(b2-xSize,toNearestHalf(rect.height/2)-xSize);
        ctx.lineTo(b2+xSize,toNearestHalf(rect.height/2)+xSize);
        ctx.moveTo(b2+xSize,toNearestHalf(rect.height/2)-xSize);
        ctx.lineTo(b2-xSize,toNearestHalf(rect.height/2)+xSize);
        ctx.stroke();
        
    script(src="/js/point.js" type="module" defer)
    script(src="/js/editGame.js" type="module" defer)
    
            